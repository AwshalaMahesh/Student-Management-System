Student Management System

Overview

The Student Management System is a full-stack application developed using Spring Boot, ReactJS, and MySQL. This system provides functionality for managing student information, allowing users to add, update, and delete student details. It operates as a RESTful application, ensuring ease of integration and scalability.

## Technologies Used

- **Spring Boot**: A Java-based framework for building robust and scalable backend applications.
- **ReactJS**: A JavaScript library for building user interfaces, providing a dynamic and responsive front-end.
- **MySQL**: A relational database management system for efficient and organized data storage.

## Features

1. **Add Student**: Easily add new student details, including personal information and academic records.

2. **Update Student**: Update existing student information to keep the records accurate and up-to-date.

3. **Delete Student**: Remove student records when necessary, maintaining data integrity.

## Getting Started

### Prerequisites

Make sure you have the following installed on your system:

- Java Development Kit (JDK)
- Node.js and npm
- MySQL Database

### Installation

1. **Backend (Spring Boot)**:

   - Clone the repository.
   - Open the project in your preferred IDE.
   - Configure the database connection in `application.properties`.
   - Run the Spring Boot application.

2. **Frontend (ReactJS)**:

   - Navigate to the `frontend` directory.
   - Run `npm install` to install dependencies.
   - Update the API endpoint in `src/services/api.js` if necessary.
   - Run `npm start` to launch the React application.

3. **Database**:

   - Create a MySQL database.
   - Update the database connection details in `application.properties`.

## Usage

Access the application through the provided URL, typically `http://localhost:3000/`. Use the user interface to add, update, and delete student details.

## API Endpoints

The backend provides the following RESTful API endpoints:

- `GET /users`: Retrieve all student details.
- `GET /user/{id}`: Retrieve details for a specific student.
- `POST /user`: Add a new student.
- `PUT /user/{id}`: Update details for a specific student.
- `DELETE /user/{id}`: Delete a student.
